" .vimrc wip - source https://github.com/dougblack/dotfiles/blob/master/.vimrc
" Plugins {{{
execute pathogen#infect()
call pathogen#helptags()
""" }}}
" Colours and Syntax {{{
filetype plugin indent on
syntax enable                       " enable syntax processing
set background=dark
colorscheme badwolf
" Make the gutters darker than the background.
let g:badwolf_darkgutter = 1
" }}}
" Misc {{{
let mapleader = ","
set noerrorbells 
set clipboard=unnamed
set autowrite
" }}}
" Spaces & Tabs {{{
set tabstop=4                       " 4 space tab
set softtabstop=4                   " 4 space tab
set expandtab                       " use spaces for tabs
                                    " special comments somewhere in a file that can can declare certain 
                                    " Vim settings to be used only for that file
set modelines=1 
" }}}
" UI Layout {{{
set number                          " show line numbers
set showcmd                         " show command in bottom bar
set wildmenu                        " visual autocomplete for command menu
set showmatch                       " highlight matchin [{()}]
set wrap
set textwidth=79
" }}}
" Searching {{{
set incsearch                       " search as characters are entered
set hlsearch                        " highlight matches
set ignorecase                      " ignore case when searching
set smartcase                       " ... but not when search pattern contains uppercase chars
" }}}
" Line Shortcuts (movement) {{{
                                    " move vertically by visual line
                                    " move around lines visually. When there is a very long line
                                    " that gets visualy wrapped to two lines, `j` won't skip over the
                                    " `fake` part of the visual line in favour of the next `real` line.
nnoremap j gj
nnoremap k gk
" }}}
" vim-go {{{

"install vim-go dependencies

call plug#begin()
call plug#end()

let g:go_fmt_command = "goimports"    
" highlight go syntax
let g:go_highlight_types = 1         
let g:go_highlight_fields = 1       
let g:go_highlight_functions = 1      
let g:go_highlight_function_calls = 1
"shortcuts to jump between errors in quickfix list 
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>

" shortcuts to build and run a Go program with <leader>b and <leader>r
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)

autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4 
" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)

" }}}

" vim:foldmethod=marker:foldlevel=0
